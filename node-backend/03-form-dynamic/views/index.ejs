<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- 아래 cdn은 axios를 사용하기 위한 것 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="iffffffd" pattern="^[a-z0-9]{5,}$" required title="소문자, 숫자를 포함해 5글자 이상" />
      <input type="password" name="pw" placeholder="password" value="12345" />
      <input type="text" name="name" placeholder="이름" value="가나다" />
      <div>
        <button type="button" onclick="ajaxGet()"> ajax get 전송 </button>
        <button type="button" onclick="ajaxPost()"> ajax post 전송 </button>
        <button type="button" onclick="axiosGet()"> axios get 전송 </button>
        <button type="button" onclick="axiosPost()"> axios post 전송 </button>
        <button type="button" onclick="fetchGet()"> fetch get 전송 </button>
        <button type="button" onclick="fetchPost()"> fetch post 전송 </button>
      </div>
      <!-- <input type="submit" /> -->
      <!-- <button type="submit"> 제출 </button> -->
      <!-- form에 action과 method가 없으면 submit 했을 때 현재 위치(주소)에 get 요청을 받음
        따라서 비동기 처리를 할 때는 js로 -->

    </form>

    <h3 id="result"> </h3>

    <script>
      function getData() {
        const form = document.forms["register"]

        // 선택된 form의 유효성을 검사하는 함수, 하나라도 걸리면 false(boolean 값)를 반환
        if (!form.checkValidity()) {
          form.reportValidity() // 유효성 검사를 통과하지 못한 input에 대해 report 한다.
          return false //함수는 return을 만나면 다음 코드를 읽지 않는다. 그대로 종료.
        }
        // getData 함수의 반환값을 총 2가지 형태
        // false | object(객체 형태)

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value

        }
        return data

      }

      function ajaxGet() {
        const form = document.forms["register"]
        // console.log(form)
        // console.dir(form)
        // console.dir(form.id) //form의 하위 요소 중 name을 이용해 각 요소를 선택할 수 있다.
        // console.dir(form.id.value)

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value
        }

        $.ajax({
          type: 'GET', //폼 속성 중 method에 해당하는 내용
          //   url: '/ajax', // 폼 속성 중 action에 해당하는 내용
          //   data: data, // 데이터를 전송
          url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`, // 직접 쿼리를 작성해서 불러오기도 가능

          success: function(result) {
            // 매개변수(result)에 응답이 들어옴
            console.log(result)
            const {
              name
            } = result // 객체 구조 분해 할당으로 가져올 수도 있음
            $("#result").html(`ajax get 요청 성공! ${name} 님, 환영합니다.`)
          } // 응답을 성공적으로 받았을 때에 대한 이벤트 핸들러, 서버에서 send한 값을 이 함수에서 받음
        })
      }

      function ajaxPost() {
        const data = getData()

        $.ajax({
          type: 'POST',
          url: '/ajax',
          data: data,
          success: function(result) {
            console.log(result)
            $("#result").html(`ajax post 요청 성공! ${result.name} 님, 환영합니다.`)
          }
        })
      }

      function axiosGet() {
        const data = getData()

        // axios 함수는 promise 객체를 return하므로, then과 async/await 사용 가능
        axios({
          method: "GET",
          url: "axios",
          params: data, // get 요청으로 보낼 데이터
          //parms 대신 url에 query를 직접 작성해도 됨
        }).then((res) => {
          // 서버에서 보내 준 응답이 res에 담김
          console.log("res", res)
          console.log("res.data", res.data)

          const {
            name
          } = res.data

          $("#result").html(`axios get 요청 성공! ${name} 님, 환영합니다.`)

        })
      }

      async function axiosPost() {
        // 동적 폼 전송
        // 폼 유효성 검사도 하고 싶음
        // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용해 하고 싶음
        // input 태그의 pattern, minlength, required 등의 속성은 form의 "submit"이 일어날 때 동작함
        // 동적 폼 전송은 form의 "submit"을 이용하는 것이 아님
        // 따라서, 아래와 같이 js 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야 한다.
        // 방법1. const regex = /^[a-z0-9{5,}]$/
        // regex.test(form.id.value)
        // 방법2. form.checkValidity()와 form.reportValidity()을 이용해 input에 작성된 유효성을 검증

        const data = getData()
        // data에 받아오는 값은 두 가지 형태 중 하나
        // false | object

        if (!data) return
        // false라면 !에 의해 true가 되고, return을 만남 > 그럼 axiosPost 함수는 종료됨
        // 함수에 제대로 된 값이 들어오지 않으면 다음 코드를 읽지 않겠다는 의미

        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨
        }) // axios 함수가 실행된 결과(서버의 응답)이 res에 담긴다.

        console.log("res", res)
        console.log("res.data", res.data)
        $("#result").html(`axios post 요청 성공! ${res.data.name} 님, 환영합니다.`)


        // axios({
        //   method: "POST",
        //   url: "/axios",
        //   data: data, // post 요청으로 보낼 데이터
        // }).then((res) => {
        //   console.log(res.data)
        //   const {
        //     name
        //   } = res.data
        //   $("#result").html(`axios post 요청 성공! ${name} 님, 환영합니다.`)

        // })

      }

      async function fetchGet() {
        const data = getData()
        if (!data) return

        // fetch(url, option 객체)
        // url은 action을 의미
        // option 객체에 method가 있음
        // fetch는 method: "GET"이 기본값
        // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송해야 한다.
        // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`

        // 쿼리를 만드는 메소드
        const urlQuery = new URLSearchParams(data).toString() //query로 만들고 싶은 객체(data)를 넣는다.

        // --------------- 방법 1 (then 체이닝) ----------------
        // fetch(`/fetch?${urlQuery}`)
        //   .then((res) => {
        //     console.log("원본", res)
        //     return res.json()
        //   }).then((res) => {
        //     console.log("파싱", res)
        //   })

        // --------------- 방법 2 (반만 async/await) ----------------
        //   fetch(`/fetch?${urlQuery}`)
        //   .then(async (res) => {
        //     console.log("원본", res)
        //     console.log("파싱", await res.json)
        //     // 응답을 파싱해야 함.
        //     // .json(), .text()
        //   })


        // --------------- 방법 3 (async/await) ----------------
        const oriRes = await fetch(`/fetch?${urlQuery}`)
        const res = await oriRes.json()
        console.log(res)

      }

      function fetchPost() {
        const data = getData()
        if (!data) return

        // 원래는 content-type 기본값 사용: application / x-www-form-urlencode
        // 하지만, fetch post 요청 시에는 변경해 주어야 함(기본값 사용 시 동작 안 함)
        // content-type을 application/json 형태로 변경
        fetch("/fetch", {
          method: "POST",
          headers: {
            'Content-type': "application/json"
          },
          body: JSON.stringify(data) // data객체(js)를 json 형태로 변경하는 함수
        }).then((res) => {
          return res.json()
        }).then((res) => {
          console.log(res)
          $("#result").html(`fetch post 요청 성공! ${res.name} 님, 환영합니다.`)
        })

      }
    </script>
  </body>
</html>