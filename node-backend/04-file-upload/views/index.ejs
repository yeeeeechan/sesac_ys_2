<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>파일 업로드</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h2> 가장 기본적인 설정 </h2>
    <!-- 일반 폼 전송을 이용해 파일 업로드하기 -->
    <!-- 파일 전송은 post로 보내야 함 -->
    <!-- enctype : application/x-qqq-form-urlencoded. (기본값) -->
    <!-- 파일을 전송하려면 multipart/form-data로 변경해야 함 -->
    <form action="/upload" method="post" enctype="multipart/form-data">
      <input type="file" name="userfile" /> <br />
      <input type="text" name="title"> <br /><br />
      <button type="submit"> 업로드 </button>
    </form>

    <h2> multer storage를 이용한 설정 </h2>
    <form action="/upload/detail" method="post" enctype="multipart/form-data">
      <input type="file" name="userfile" /> <br />
      <input type="text" name="title"> <br /><br />
      <button type="submit"> 업로드 </button>
    </form>

    <h2> 파일 여러 개 업로드 (하나의 input 이용) </h2>
    <form action="/upload/array" method="post" enctype="multipart/form-data">
      <!-- input type file의 multiple 속성은 여러 개의 파일을 선택할 수 있게 해 준다.  -->
      <input type="file" name="userfile" multiple /> <br />
      <input type="text" name="title"> <br /><br />
      <button type="submit"> 업로드 </button>
    </form>

    <h2> 파일 여러 개 업로드 (여러 개의 input 이용) </h2>
    <form action="/upload/fields" method="post" enctype="multipart/form-data">
      <input type="file" name="userfile1" multiple /> <br />
      <input type="text" name="title"> <br /><br />
      <input type="file" name="userfile2" /> <br />
      <input type="text" name="title"> <br /><br />
      <button type="submit"> 업로드 </button>
    </form>

    <h2> 동적 폼 전송(axios)을 이용한 파일 업로드 </h2>
    <form name="dynamic-upload">
      <input type="file" name="userfile" multiple /> <br />
      <input type="text" name="title"> <br /><br />
      <button type="button" onclick="dynamicUpload()"> 업로드 </button>
    </form>

    <div id="dynamic-upload-result"></div>

    <script>
      function dynamicUpload() {
        const form = document.forms["dynamic-upload"]

        const formData = new FormData();
        // FormData 객체의 append 메소드는 데이터를 추가할 때 사용
        formData.append("title", form.title.value)

        // type이 file인 input 태그를 선택해서 files에 접근해 보기
        console.log("value", form.userfile.value) // 이미지 이름에 대한 경로가 뜸(심지어 fakepath)
        console.log("files", form.userfile.files) // 이미지 파일에 대한 정보(배열 형태)에 접근하는 방법(files)

        formData.append("userfile", form.userfile.files[0])

        // input 태그의 type이 file일 때는 .value로 선택할 수 없으므로, 아래 방식은 이미지 데이터를 정상적으로 처리할 수 없음
        // const data = {
        //  title : form.title.value,
        //  userfile: form.userfile.value
        // }

        axios({
          method: "post",
          url: "/upload/dynamic",
          data: formData, // 위에서 만든 formData은 일반 전송에서 사용하던 데이터 배열 형태 (서버에서 사용할 땐 다를 것 없음)
          headers: {
            "Content-type": "multipart/form-data"
          }
        }).then((res) => {
          console.log(res.data)
          const result = document.getElementById("dynamic-upload-result")
          result.innerHTML = `<img src= "/${res.data.src}" width="150" />`
        })
      }
    </script>


  </body>
</html>